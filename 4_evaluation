from PIL import Image
import numpy as np
from skimage.metrics import structural_similarity as ssim
import os

# 画像読み込み（グレースケール）
def load_image(path):
    img = Image.open(path).convert("L") 
    return np.array(img)

# PSNR
def calculate_psnr(img1, img2):
    diff = img1.astype(np.float64) - img2.astype(np.float64)
    mse = np.mean(diff ** 2)
    if mse == 0:
        return float('inf')
    return 10 * np.log10((255.0 ** 2) / mse)

# SSIM
def calculate_ssim(img1, img2):
    score, _ = ssim(img1, img2, full=True, data_range=255)
    return score

# 評価
def evaluation():
    base_path = os.path.join("before", f"cropped_image_0001.jpg")
    edit_path = os.path.join("edit", f"cropped_image_0001.jpg")
    avg_path  = os.path.join("results", "average", f"average_image_set_0001_frame_0.png")
    hdr_path  = os.path.join("results", "hdr", f"fused_blocks_set_0001_frame_0.png")

    base = load_image(base_path)
    targets = [
        ("ノイズ画像", edit_path),
        ("average", avg_path),
        ("hdr", hdr_path),
    ]

    for label, tpath in targets:
        try:
            img = load_image(tpath)
        except Exception as e:
            print(f"読み込み失敗: {label} -> {tpath}")
            continue

        psnr_val = calculate_psnr(base, img)
        ssim_val = calculate_ssim(base, img)

        print(f"< {label}/基準画像 >")
        print(f" ・PSNR: {psnr_val:.2f} dB")
        print(f" ・SSIM: {ssim_val:.4f}")

# --- 実行例 ---
if __name__ == "__main__":
    evaluation()
